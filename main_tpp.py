import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Data
data = {
    'MES_ORDEN': [8, 9, 10, 11, 12],
    'MES': ['Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
    'PRED_PROPHET_INGRESOS': [5025995.23, 5065257.67, 5103253.57, 5142516.00, 5180511.91],
    'PRED_PROPHET_EBITDA': [331674.97, 338807.27, 345709.50, 352841.80, 359744.02],
    'PRED_PROPHET_RESULTADOS': [121228.36, 123507.68, 125713.48, 127992.80, 130198.60],
    'PRED_XGBOOST_INGRESOS': [4962693.00, 4962693.00, 4782685.50, 4962693.00, 4962693.00],
    'PRED_XGBOOST_EBITDA': [306127.12, 282759.66, 334505.50, 306127.12, 334505.50],
    'PRED_XGBOOST_RESULTADOS': [147601.91, 147601.91, 89284.68, 89284.68, 89284.68],
    'PRED_ARIMA_INGRESOS': [5731197.96, 6118583.84, 6422632.81, 6785591.69, 7107009.49],
    'PRED_ARIMA_EBITDA': [485033.54, 454338.61, 508849.06, 562543.80, 602899.92],
    'PRED_ARIMA_RESULTADOS': [137876.23, 162653.18, 186043.94, 208022.85, 222794.63],
    'PRED_LSTM_INGRESOS': [4658240.00, 3808437.25, 4789770.00, 4973199.50, 4966269.50],
    'PRED_LSTM_EBITDA': [225766.58, 161606.66, 348292.78, 323034.97, 228387.06],
    'PRED_LSTM_RESULTADOS': [27254.73, 66922.84, 130848.26, 94948.55, 78877.24],
    'PRED_REGRESION_INGRESOS': [4376678.92, 5133196.57, 4443544.99, 5027782.30, 4522697.78],
    'PRED_REGRESION_EBITDA': [206868.00, 264394.41, 294105.98, 268670.41, 271941.26],
    'PRED_REGRESION_RESULTADOS': [23537.14, 57213.13, 111469.90, 80579.85, 70723.35]
}

data = {'MES_ORDEN': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11, 11: 12}, 
        'MES': {0: 'Enero', 1: 'Febrero', 2: 'Marzo', 3: 'Abril', 4: 'Mayo', 5: 'Junio', 6: 'Julio', 7: 'Agosto', 8: 'Septiembre', 9: 'Octubre', 10: 'Noviembre', 11: 'Diciembre'}, 
        'PRED_PROPHET_INGRESOS': {0: 5009226.2704, 1: 5315927.7804, 2: 4320421.9207, 3: 4291882.9696, 4: 4775434.6389, 5: 4970447.3900999995, 6: 5440899.239, 7: 5911354.979786884, 8: 6397490.279995421, 9: 6867943.796326263, 10: 7354079.096534799, 11: 7824532.612865641},
        'PRED_PROPHET_EBITDA': {0: 335692.9057999995, 1: 430601.72589999967, 2: 134716.17329999967, 3: 198995.78590000025, 4: 304403.0947999995, 5: 290660.33399999945, 6: 432413.6551000001, 7: 421348.07029101875, 8: 468455.69666325726, 9: 514043.7221847784, 10: 561151.348557017, 11: 606739.3740785382}, 
        'PRED_PROPHET_RESULTADOS': {0: 146274.11489999946, 1: 262619.2969999993, 2: -77948.28720000014, 3: 52896.59819999989, 4: 73585.12089999951, 5: 130731.00959999952, 6: 199110.32610000018, 7: 121317.19963485164, 8: 123621.64814068167, 9: 125851.75959793654, 10: 128156.2081037666, 11: 130386.31956102148}, 
        'PRED_XGBOOST_INGRESOS': {0: 5009226.2704, 1: 5315927.7804, 2: 4320421.9207, 3: 4291882.9696, 4: 4775434.6389, 5: 4970447.3900999995, 6: 5440899.239, 7: 5240697.5, 8: 5437646.5, 9: 5240697.5, 10: 5437646.5, 11: 5240697.5}, 
        'PRED_XGBOOST_EBITDA': {0: 335692.9057999995, 1: 430601.72589999967, 2: 134716.17329999967, 3: 198995.78590000025, 4: 304403.0947999995, 5: 290660.33399999945, 6: 432413.6551000001, 7: 271847.71875, 8: 393404.25, 9: 421563.9375, 10: 421563.9375, 11: 421563.9375}, 
        'PRED_XGBOOST_RESULTADOS': {0: 146274.11489999946, 1: 262619.2969999993, 2: -77948.28720000014, 3: 52896.59819999989, 4: 73585.12089999951, 5: 130731.00959999952, 6: 199110.32610000018, 7: 261443.0, 8: 261443.0, 9: 261443.0, 10: 261443.0, 11: 261443.0}, 
        'PRED_ARIMA_INGRESOS': {0: 5009226.2704, 1: 5315927.7804, 2: 4320421.9207, 3: 4291882.9696, 4: 4775434.6389, 5: 4970447.3900999995, 6: 5440899.239, 7: 6111394.430260713, 8: 6652692.609726292, 9: 7154631.104469881, 10: 7730704.350288002, 11: 8295197.057460167}, 
        'PRED_ARIMA_EBITDA': {0: 335692.9057999995, 1: 430601.72589999967, 2: 134716.17329999967, 3: 198995.78590000025, 4: 304403.0947999995, 5: 290660.33399999945, 6: 432413.6551000001, 7: 393213.57779765566, 8: 417080.00334516494, 9: 418966.2736879236, 10: 428513.14357233024, 11: 435390.11486908665}, 
        'PRED_ARIMA_RESULTADOS': {0: 146274.11489999946, 1: 262619.2969999993, 2: -77948.28720000014, 3: 52896.59819999989, 4: 73585.12089999951, 5: 130731.00959999952, 6: 199110.32610000018, 7: 160504.9802481436, 8: 178148.53316817922, 9: 166218.32716336226, 10: 169836.9983106495, 11: 165280.59839897658}, 
        'PRED_LSTM_INGRESOS': {0: 5009226.2704, 1: 5315927.7804, 2: 4320421.9207, 3: 4291882.9696, 4: 4775434.6389, 5: 4970447.3900999995, 6: 5440899.239, 7: 5557093.0, 8: 5530463.5, 9: 5745009.0, 10: 6415030.5, 11: 6374347.0}, 
        'PRED_LSTM_EBITDA': {0: 335692.9057999995, 1: 430601.72589999967, 2: 134716.17329999967, 3: 198995.78590000025, 4: 304403.0947999995, 5: 290660.33399999945, 6: 432413.6551000001, 7: 459334.53125, 8: 453082.5625, 9: 492160.96875, 10: 671404.125, 11: 619947.75}, 
        'PRED_LSTM_RESULTADOS': {0: 146274.11489999946, 1: 262619.2969999993, 2: -77948.28720000014, 3: 52896.59819999989, 4: 73585.12089999951, 5: 130731.00959999952, 6: 199110.32610000018, 7: 255428.109375, 8: 291857.34375, 9: 342656.875, 10: 430145.75, 11: 462818.34375}, 
        'PRED_REGRESION_INGRESOS': {0: 5009226.2704, 1: 5315927.7804, 2: 4320421.9207, 3: 4291882.9696, 4: 4775434.6389, 5: 4970447.3900999995, 6: 5440899.239, 7: 5841159.512418274, 8: 6025602.832583195, 9: 6564423.898364611, 10: 6643568.857583606, 11: 7081328.3346986}, 
        'PRED_REGRESION_EBITDA': {0: 335692.9057999995, 1: 430601.72589999967, 2: 134716.17329999967, 3: 198995.78590000025, 4: 304403.0947999995, 5: 290660.33399999945, 6: 432413.6551000001, 7: 522720.72427062853, 8: 527013.4650446236, 9: 661385.4539022004, 10: 656753.677290531, 11: 732466.548260982}, 
        'PRED_REGRESION_RESULTADOS': {0: 146274.11489999946, 1: 262619.2969999993, 2: -77948.28720000014, 3: 52896.59819999989, 4: 73585.12089999951, 5: 130731.00959999952, 6: 199110.32610000018, 7: 327575.5193049509, 8: 359514.91037189047, 9: 411021.39505814324, 10: 462167.3560222316, 11: 518261.76182785566}, 
        'PRED_OLS_INGRESOS': {0: 5009226.2704, 1: 5315927.7804, 2: 4320421.9207, 3: 4291882.9696, 4: 4775434.6389, 5: 4970447.3900999995, 6: 5440899.239, 7: 5595857.158850578, 8: 5213755.2307704175, 9: 5119981.131637313, 10: 5535630.552246681, 11: 5700200.708096408}, 
        'PRED_OLS_EBITDA': {0: 335692.9057999995, 1: 430601.72589999967, 2: 134716.17329999967, 3: 198995.78590000025, 4: 304403.0947999995, 5: 290660.33399999945, 6: 432413.6551000001, 7: 457663.4909090909, 8: 310634.1545454544, 9: 345149.0606060605, 10: 379663.96666666656, 11: 414178.87272727257}, 
        'PRED_OLS_RESULTADOS': {0: 146274.11489999946, 1: 262619.2969999993, 2: -77948.28720000014, 3: 52896.59819999989, 4: 73585.12089999951, 5: 130731.00959999952, 6: 199110.32610000018, 7: 305009.2992335408, 8: 159093.33693172125, 9: 257795.8402372132, 10: 303467.23123213137, 11: 349138.6222270495}, 
        'PRED_INGRESOS_ICI': {0: np.nan, 1: np.nan, 2: np.nan, 3: np.nan, 4: np.nan, 5: np.nan, 6: np.nan, 7: 5413728.890960965, 8: 4949866.833317801, 9: 4823223.262810262, 10: 5118737.400024544, 11: 5254134.44768641}, 
        'PRED_INGRESOS_ICS': {0: np.nan, 1: np.nan, 2: np.nan, 3: np.nan, 4: np.nan, 5: np.nan, 6: np.nan, 7: 5777985.42674019, 8: 5477643.628223034, 9: 5416739.000464365, 10: 5952523.704468818, 11: 6146266.968506407}, 
        'PRED_EBITDA_ICI': {0: np.nan, 1: np.nan, 2: np.nan, 3: np.nan, 4: np.nan, 5: np.nan, 6: np.nan, 7: 377777.941497425, 8: 61791.95040348021, 9: 68657.72267053358, 10: 75523.49493758683, 11: 82389.2672046402}, 
        'PRED_EBITDA_ICS': {0: np.nan, 1: np.nan, 2: np.nan, 3: np.nan, 4: np.nan, 5: np.nan, 6: np.nan, 7: 527667.0769727716, 8: 528694.201477858, 9: 587438.0016420645, 10: 646181.8018062711, 11: 704925.6019704773}, 
        'PRED_RESULTADOS_ICI': {0: np.nan, 1: np.nan, 2: np.nan, 3: np.nan, 4: np.nan, 5: np.nan, 6: np.nan, 7: 175294.60293016117, 8: -12586.87832773314, 9: 178871.3739874853, 10: 270756.66005006456, 11: 283996.59686843096}, 
        'PRED_RESULTADOS_ICS': {0: np.nan, 1: np.nan, 2: np.nan, 3: np.nan, 4: np.nan, 5: np.nan, 6: np.nan, 7: 396336.46341417887, 8: 224933.37541176303, 9: 329611.6858842885, 10: 377471.7082162226, 11: 439094.66666589386}, 
        'MODO': {0: 'REAL', 1: 'REAL', 2: 'REAL', 3: 'REAL', 4: 'REAL', 5: 'REAL', 6: 'REAL', 7: 'PREDICCION', 8: 'PREDICCION', 9: 'PREDICCION', 10: 'PREDICCION', 11: 'PREDICCION'}, 
        'PPTO_INGRESOS': {0: 5040095.798294445, 1: 5102994.365433342, 2: 5010489.222120963, 3: 4467259.530395255, 4: 4666851.331973918, 5: 4493862.295762181, 6: 4702319.827439584, 7: 5540263.969283881, 8: 5327255.079661131, 9: 5465121.339748574, 10: 5670132.133808331, 11: 6045644.435852007}, 
        'PPTO_EBITDA': {0: 330301.3379535913, 1: 254884.49628624498, 2: 274206.77587360423, 3: 150111.79764336295, 4: 233226.18737754866, 5: 244611.14584206592, 6: 245629.25085794332, 7: 409183.21562344866, 8: 456903.23144509946, 9: 481518.3154437848, 10: 492954.4963088833, 11: 602517.9535985163}, 
        'PPTO_RESULTADOS': {0: 137052.7060355805, 1: 72014.30604600068, 2: 72955.64633252937, 3: -49062.1508291848, 4: 48446.70447869226, 5: 65918.7480983045, 6: 65374.665069944225, 7: 230357.2956319889, 8: 281627.64977107383, 9: 313448.17140386533, 10: 331692.0509592034, 11: 440748.600147374}}






df_org = pd.DataFrame({"PARTIDA GENERAL":{"3":"COSTO FIJO","4":"COSTO FIJO","7":"COSTO FIJO","0":"COSTO FIJO","8":"COSTO FIJO","6":"COSTO FIJO","5":"COSTO FIJO","1":"COSTO FIJO","11":"COSTO FIJO","10":"COSTO FIJO","9":"COSTO FIJO","2":"COSTO FIJO","15":"COSTO VARIABLE","16":"COSTO VARIABLE","19":"COSTO VARIABLE","12":"COSTO VARIABLE","20":"COSTO VARIABLE","18":"COSTO VARIABLE","17":"COSTO VARIABLE","13":"COSTO VARIABLE","23":"COSTO VARIABLE","22":"COSTO VARIABLE","21":"COSTO VARIABLE","14":"COSTO VARIABLE","147":"EBITDA","148":"EBITDA","151":"EBITDA","144":"EBITDA","152":"EBITDA","150":"EBITDA","149":"EBITDA","145":"EBITDA","155":"EBITDA","154":"EBITDA","153":"EBITDA","146":"EBITDA","27":"GASTOS CON EL PERSONAL FIJO","28":"GASTOS CON EL PERSONAL FIJO","31":"GASTOS CON EL PERSONAL FIJO","24":"GASTOS CON EL PERSONAL FIJO","32":"GASTOS CON EL PERSONAL FIJO","30":"GASTOS CON EL PERSONAL FIJO","29":"GASTOS CON EL PERSONAL FIJO","25":"GASTOS CON EL PERSONAL FIJO","35":"GASTOS CON EL PERSONAL FIJO","34":"GASTOS CON EL PERSONAL FIJO","33":"GASTOS CON EL PERSONAL FIJO","26":"GASTOS CON EL PERSONAL FIJO","39":"GASTOS CON EL PERSONAL OTROS","40":"GASTOS CON EL PERSONAL OTROS","43":"GASTOS CON EL PERSONAL OTROS","36":"GASTOS CON EL PERSONAL OTROS","44":"GASTOS CON EL PERSONAL OTROS","42":"GASTOS CON EL PERSONAL OTROS","41":"GASTOS CON EL PERSONAL OTROS","37":"GASTOS CON EL PERSONAL OTROS","47":"GASTOS CON EL PERSONAL OTROS","46":"GASTOS CON EL PERSONAL OTROS","45":"GASTOS CON EL PERSONAL OTROS","38":"GASTOS CON EL PERSONAL OTROS","51":"GASTOS CON EL PERSONAL VARIABLE","52":"GASTOS CON EL PERSONAL VARIABLE","55":"GASTOS CON EL PERSONAL VARIABLE","48":"GASTOS CON EL PERSONAL VARIABLE","56":"GASTOS CON EL PERSONAL VARIABLE","54":"GASTOS CON EL PERSONAL VARIABLE","53":"GASTOS CON EL PERSONAL VARIABLE","49":"GASTOS CON EL PERSONAL VARIABLE","59":"GASTOS CON EL PERSONAL VARIABLE","58":"GASTOS CON EL PERSONAL VARIABLE","57":"GASTOS CON EL PERSONAL VARIABLE","50":"GASTOS CON EL PERSONAL VARIABLE","63":"GASTOS INDIRECTOS","64":"GASTOS INDIRECTOS","67":"GASTOS INDIRECTOS","60":"GASTOS INDIRECTOS","68":"GASTOS INDIRECTOS","66":"GASTOS INDIRECTOS","65":"GASTOS INDIRECTOS","61":"GASTOS INDIRECTOS","71":"GASTOS INDIRECTOS","70":"GASTOS INDIRECTOS","69":"GASTOS INDIRECTOS","62":"GASTOS INDIRECTOS","75":"GASTOS POR AMORT. Y DEPREC.","76":"GASTOS POR AMORT. Y DEPREC.","79":"GASTOS POR AMORT. Y DEPREC.","72":"GASTOS POR AMORT. Y DEPREC.","80":"GASTOS POR AMORT. Y DEPREC.","78":"GASTOS POR AMORT. Y DEPREC.","77":"GASTOS POR AMORT. Y DEPREC.","73":"GASTOS POR AMORT. Y DEPREC.","83":"GASTOS POR AMORT. Y DEPREC.","82":"GASTOS POR AMORT. Y DEPREC.","81":"GASTOS POR AMORT. Y DEPREC.","74":"GASTOS POR AMORT. Y DEPREC.","87":"GASTOS\\/INGRESO NO OPERACIONALES","88":"GASTOS\\/INGRESO NO OPERACIONALES","91":"GASTOS\\/INGRESO NO OPERACIONALES","84":"GASTOS\\/INGRESO NO OPERACIONALES","92":"GASTOS\\/INGRESO NO OPERACIONALES","90":"GASTOS\\/INGRESO NO OPERACIONALES","89":"GASTOS\\/INGRESO NO OPERACIONALES","85":"GASTOS\\/INGRESO NO OPERACIONALES","95":"GASTOS\\/INGRESO NO OPERACIONALES","94":"GASTOS\\/INGRESO NO OPERACIONALES","93":"GASTOS\\/INGRESO NO OPERACIONALES","86":"GASTOS\\/INGRESO NO OPERACIONALES","99":"INGRESOS DE LA EXPLOTACION","100":"INGRESOS DE LA EXPLOTACION","103":"INGRESOS DE LA EXPLOTACION","96":"INGRESOS DE LA EXPLOTACION","104":"INGRESOS DE LA EXPLOTACION","102":"INGRESOS DE LA EXPLOTACION","101":"INGRESOS DE LA EXPLOTACION","97":"INGRESOS DE LA EXPLOTACION","107":"INGRESOS DE LA EXPLOTACION","106":"INGRESOS DE LA EXPLOTACION","105":"INGRESOS DE LA EXPLOTACION","98":"INGRESOS DE LA EXPLOTACION","135":"M1","136":"M1","139":"M1","132":"M1","140":"M1","138":"M1","137":"M1","133":"M1","143":"M1","142":"M1","141":"M1","134":"M1","159":"M2","160":"M2","163":"M2","156":"M2","164":"M2","162":"M2","161":"M2","157":"M2","167":"M2","166":"M2","165":"M2","158":"M2","123":"MARGEN BRUTO","124":"MARGEN BRUTO","127":"MARGEN BRUTO","120":"MARGEN BRUTO","128":"MARGEN BRUTO","126":"MARGEN BRUTO","125":"MARGEN BRUTO","121":"MARGEN BRUTO","131":"MARGEN BRUTO","130":"MARGEN BRUTO","129":"MARGEN BRUTO","122":"MARGEN BRUTO","111":"MARGEN DE CONTRIBUCION","112":"MARGEN DE CONTRIBUCION","115":"MARGEN DE CONTRIBUCION","108":"MARGEN DE CONTRIBUCION","116":"MARGEN DE CONTRIBUCION","114":"MARGEN DE CONTRIBUCION","113":"MARGEN DE CONTRIBUCION","109":"MARGEN DE CONTRIBUCION","119":"MARGEN DE CONTRIBUCION","118":"MARGEN DE CONTRIBUCION","117":"MARGEN DE CONTRIBUCION","110":"MARGEN DE CONTRIBUCION","171":"RESULTADOS ANTES DE IMPUESTOS","172":"RESULTADOS ANTES DE IMPUESTOS","175":"RESULTADOS ANTES DE IMPUESTOS","168":"RESULTADOS ANTES DE IMPUESTOS","176":"RESULTADOS ANTES DE IMPUESTOS","174":"RESULTADOS ANTES DE IMPUESTOS","173":"RESULTADOS ANTES DE IMPUESTOS","169":"RESULTADOS ANTES DE IMPUESTOS","179":"RESULTADOS ANTES DE IMPUESTOS","178":"RESULTADOS ANTES DE IMPUESTOS","177":"RESULTADOS ANTES DE IMPUESTOS","170":"RESULTADOS ANTES DE IMPUESTOS"},"MES":{"3":"ENERO","4":"FEBRERO","7":"MARZO","0":"ABRIL","8":"MAYO","6":"JUNIO","5":"JULIO","1":"AGOSTO","11":"SEPTIEMBRE","10":"OCTUBRE","9":"NOVIEMBRE","2":"DICIEMBRE","15":"ENERO","16":"FEBRERO","19":"MARZO","12":"ABRIL","20":"MAYO","18":"JUNIO","17":"JULIO","13":"AGOSTO","23":"SEPTIEMBRE","22":"OCTUBRE","21":"NOVIEMBRE","14":"DICIEMBRE","147":"ENERO","148":"FEBRERO","151":"MARZO","144":"ABRIL","152":"MAYO","150":"JUNIO","149":"JULIO","145":"AGOSTO","155":"SEPTIEMBRE","154":"OCTUBRE","153":"NOVIEMBRE","146":"DICIEMBRE","27":"ENERO","28":"FEBRERO","31":"MARZO","24":"ABRIL","32":"MAYO","30":"JUNIO","29":"JULIO","25":"AGOSTO","35":"SEPTIEMBRE","34":"OCTUBRE","33":"NOVIEMBRE","26":"DICIEMBRE","39":"ENERO","40":"FEBRERO","43":"MARZO","36":"ABRIL","44":"MAYO","42":"JUNIO","41":"JULIO","37":"AGOSTO","47":"SEPTIEMBRE","46":"OCTUBRE","45":"NOVIEMBRE","38":"DICIEMBRE","51":"ENERO","52":"FEBRERO","55":"MARZO","48":"ABRIL","56":"MAYO","54":"JUNIO","53":"JULIO","49":"AGOSTO","59":"SEPTIEMBRE","58":"OCTUBRE","57":"NOVIEMBRE","50":"DICIEMBRE","63":"ENERO","64":"FEBRERO","67":"MARZO","60":"ABRIL","68":"MAYO","66":"JUNIO","65":"JULIO","61":"AGOSTO","71":"SEPTIEMBRE","70":"OCTUBRE","69":"NOVIEMBRE","62":"DICIEMBRE","75":"ENERO","76":"FEBRERO","79":"MARZO","72":"ABRIL","80":"MAYO","78":"JUNIO","77":"JULIO","73":"AGOSTO","83":"SEPTIEMBRE","82":"OCTUBRE","81":"NOVIEMBRE","74":"DICIEMBRE","87":"ENERO","88":"FEBRERO","91":"MARZO","84":"ABRIL","92":"MAYO","90":"JUNIO","89":"JULIO","85":"AGOSTO","95":"SEPTIEMBRE","94":"OCTUBRE","93":"NOVIEMBRE","86":"DICIEMBRE","99":"ENERO","100":"FEBRERO","103":"MARZO","96":"ABRIL","104":"MAYO","102":"JUNIO","101":"JULIO","97":"AGOSTO","107":"SEPTIEMBRE","106":"OCTUBRE","105":"NOVIEMBRE","98":"DICIEMBRE","135":"ENERO","136":"FEBRERO","139":"MARZO","132":"ABRIL","140":"MAYO","138":"JUNIO","137":"JULIO","133":"AGOSTO","143":"SEPTIEMBRE","142":"OCTUBRE","141":"NOVIEMBRE","134":"DICIEMBRE","159":"ENERO","160":"FEBRERO","163":"MARZO","156":"ABRIL","164":"MAYO","162":"JUNIO","161":"JULIO","157":"AGOSTO","167":"SEPTIEMBRE","166":"OCTUBRE","165":"NOVIEMBRE","158":"DICIEMBRE","123":"ENERO","124":"FEBRERO","127":"MARZO","120":"ABRIL","128":"MAYO","126":"JUNIO","125":"JULIO","121":"AGOSTO","131":"SEPTIEMBRE","130":"OCTUBRE","129":"NOVIEMBRE","122":"DICIEMBRE","111":"ENERO","112":"FEBRERO","115":"MARZO","108":"ABRIL","116":"MAYO","114":"JUNIO","113":"JULIO","109":"AGOSTO","119":"SEPTIEMBRE","118":"OCTUBRE","117":"NOVIEMBRE","110":"DICIEMBRE","171":"ENERO","172":"FEBRERO","175":"MARZO","168":"ABRIL","176":"MAYO","174":"JUNIO","173":"JULIO","169":"AGOSTO","179":"SEPTIEMBRE","178":"OCTUBRE","177":"NOVIEMBRE","170":"DICIEMBRE"},"PPTO":{"3":-222556.1452083209,"4":-222556.1452083209,"7":-222556.1452083209,"0":-222556.1452083209,"8":-222556.1452083209,"6":-222556.1452083209,"5":-222556.1452083209,"1":-222556.1452083209,"11":-222556.1452083209,"10":-222556.1452083209,"9":-222556.1452083209,"2":-222556.1452083209,"15":-3680396.289711989,"16":-3838757.7424223404,"19":-3686733.5671538399,"12":-3283029.9147189469,"20":-3389256.2702863673,"18":-3242737.1383930617,"17":-3430690.3405932039,"13":-4082736.0994520346,"23":-3827909.1942261038,"22":-3944831.4758857284,"21":-4084701.2851179251,"14":-4429063.9151561977,"147":330301.3379535913,"148":254884.496286245,"151":274206.7758736042,"144":150111.797643363,"152":233226.1873775487,"150":244611.1458420659,"149":245629.2508579433,"145":409183.2156234487,"155":456903.2314450995,"154":481518.3154437848,"153":492954.4963088833,"146":602517.9535985163,"27":-576984.4357548035,"28":-576246.0423930944,"31":-583320.8772181749,"24":-582661.2126677489,"32":-582661.2126677489,"30":-573649.5519624182,"29":-586651.3874051194,"25":-621409.7551315736,"35":-575679.1313074867,"34":-576313.959178504,"33":-576313.959178504,"26":-576313.959178504,"39":-13802.0,"40":-13802.0,"43":-13802.0,"36":-13802.0,"44":-13802.0,"42":-13802.0,"41":-13802.0,"37":-13802.0,"47":-13802.0,"46":-13802.0,"45":-13802.0,"38":-13802.0,"51":-25612.100087793,"52":-25620.0339609786,"55":-26023.110325402,"48":-26023.110325402,"56":-26023.110325402,"54":-25620.2200688101,"53":-26022.3264560744,"49":-25879.9397201437,"59":-25761.6368275817,"58":-25552.3414934461,"57":-25552.3414934461,"50":-25552.3414934461,"63":-190443.489577947,"64":-171127.9051623626,"67":-203846.7463416213,"60":-189075.3498314738,"68":-199326.4061085301,"66":-170886.0942875044,"65":-176968.3769189221,"61":-164696.8141483593,"71":-204643.7406465384,"70":-200547.1025387904,"69":-254251.9065012512,"62":-175838.1212170221,"75":-77932.0149548441,"76":-77705.4549548441,"79":-76984.3249548441,"72":-78623.4649548441,"80":-79119.9149548441,"78":-78592.7249548441,"77":-78571.4949548441,"73":-78557.3649548441,"83":-78514.5149548441,"82":-68838.2696388082,"81":-69561.6996388082,"74":-67546.4304721415,"87":-115316.6169631668,"88":-105164.7352853996,"91":-124266.8045862301,"84":-120550.4835177034,"92":-105659.5679440116,"90":-100099.672788917,"89":-101683.090833155,"85":-100268.5550366152,"95":-96761.0667191808,"94":-99231.8744011114,"93":-91700.7457108713,"86":-94222.9229790009,"99":5040095.7982944446,"100":5102994.3654333418,"103":5010489.222120963,"96":4467259.5303952554,"104":4666851.3319739178,"102":4493862.2957621813,"101":4702319.8274395838,"97":5540263.9692838807,"107":5327255.0796611309,"106":5465121.3397485744,"105":5670132.1338083306,"98":6045644.435852007,"135":520744.8275315383,"136":426012.4014486076,"139":478053.5222152255,"132":339187.1474748368,"140":432552.5934860788,"138":415497.2401295704,"137":422597.6277768654,"133":573880.029771808,"143":661546.9720916379,"142":682065.4179825751,"141":747206.4028101346,"134":778356.0748155384,"159":252369.3229987472,"160":177179.0413314009,"163":197222.4509187602,"156":71488.3326885189,"164":154106.2724227046,"162":166018.4208872218,"161":167057.7559030992,"157":330625.8506686045,"167":378388.7164902554,"166":412680.0458049766,"165":423392.7966700751,"158":534971.5231263748,"123":1137143.3633741348,"124":1041680.4778026806,"127":1101199.5097588024,"120":961673.4704679877,"128":1055038.9164792297,"126":1028569.0121607988,"125":1049073.3416380591,"121":1234971.7246235253,"131":1276789.7402267063,"130":1297733.7186545252,"129":1362874.7034820847,"122":1394024.3754874885,"111":1359699.5085824556,"112":1264236.6230110014,"115":1323755.6549671232,"108":1184229.6156763085,"116":1277595.0616875505,"114":1251125.1573691196,"113":1271629.4868463799,"109":1457527.8698318461,"119":1499345.8854350271,"118":1520289.863862846,"117":1585430.8486904055,"110":1616580.5206958093,"171":137052.7060355805,"172":72014.3060460007,"175":72955.6463325294,"168":-49062.1508291848,"176":48446.7044786923,"174":65918.7480983045,"173":65374.6650699442,"169":230357.2956319889,"179":281627.6497710738,"178":313448.1714038653,"177":331692.0509592034,"170":440748.600147374},"ppto_ptg":{"3":-0.044157126,"4":-0.0436128534,"7":-0.0444180469,"0":-0.0498193901,"8":-0.0476887154,"6":-0.0495244693,"5":-0.0473290107,"1":-0.0401706753,"11":-0.0417768892,"10":-0.0407230016,"9":-0.03925061,"2":-0.0368126422,"15":-0.7302234793,"16":-0.7522559242,"19":-0.735803113,"12":-0.7349091523,"20":-0.7262404626,"18":-0.7215924577,"17":-0.7295740117,"13":-0.7369208619,"23":-0.7185518878,"22":-0.7218195591,"21":-0.7203890824,"14":-0.7326041024,"147":0.0655347341,"148":0.0499480262,"151":0.0547265474,"144":0.0336026588,"152":0.0499750626,"150":0.0544322745,"149":0.0522357602,"145":0.0738562671,"155":0.0857671023,"154":0.0881075251,"153":0.0869388022,"146":0.0996614935,"27":-0.1144788629,"28":-0.1129231195,"31":-0.1164199445,"24":-0.1304292282,"32":-0.1248510336,"30":-0.1276517869,"29":-0.1247578661,"25":-0.1121624815,"35":-0.1080629935,"34":-0.1054530949,"33":-0.1016403049,"26":-0.0953271343,"39":-0.00273844,"40":-0.0027046865,"43":-0.0027546212,"36":-0.0030895899,"44":-0.0029574544,"42":-0.0030713002,"41":-0.002935147,"37":-0.002491217,"47":-0.0025908277,"46":-0.00252547,"45":-0.0024341584,"38":-0.0022829659,"51":-0.0050816693,"52":-0.0050205883,"55":-0.0051937264,"48":-0.0058252963,"56":-0.0055761601,"54":-0.0057011582,"53":-0.0055339338,"49":-0.0046712467,"59":-0.0048358182,"58":-0.0046755305,"57":-0.0045064808,"50":-0.0042265703,"63":-0.0377856884,"64":-0.0335348019,"67":-0.0406840006,"60":-0.0423246844,"68":-0.0427111112,"66":-0.0380265533,"65":-0.0376342706,"61":-0.0297272504,"71":-0.0384144813,"70":-0.0366958188,"69":-0.0448405611,"62":-0.0290850914,"75":-0.0154624075,"76":-0.0152274232,"79":-0.0153646324,"72":-0.0175999322,"80":-0.0169535966,"78":-0.0174889037,"77":-0.0167090921,"73":-0.0141793542,"83":-0.0147382684,"82":-0.012595927,"81":-0.0122680915,"74":-0.0111727428,"87":-0.0228798463,"88":-0.0206084365,"91":-0.0248013316,"84":-0.0269853324,"92":-0.0226404401,"90":-0.022274753,"89":-0.021624027,"85":-0.0180981548,"95":-0.0181634003,"94":-0.0181573049,"93":-0.0161725941,"86":-0.0155852571,"99":1.0,"100":1.0,"103":1.0,"96":1.0,"104":1.0,"102":1.0,"101":1.0,"97":1.0,"107":1.0,"106":1.0,"105":1.0,"98":1.0,"135":0.1033204225,"136":0.0834828281,"139":0.095410548,"132":0.0759273432,"140":0.0926861738,"138":0.0924588278,"137":0.0898700308,"133":0.1035835175,"143":0.1241815836,"142":0.1248033439,"141":0.1317793634,"134":0.1287465849,"159":0.0500723266,"160":0.034720603,"163":0.039361915,"156":0.0160027265,"164":0.033021466,"162":0.0369433707,"161":0.0355266681,"157":0.059676913,"167":0.071028834,"166":0.075511598,"165":0.0746707108,"158":0.0884887507,"123":0.2256193947,"124":0.2041312224,"127":0.2197788401,"120":0.2152714576,"128":0.2260708219,"126":0.2288830731,"125":0.2230969777,"121":0.2229084628,"131":0.239671223,"130":0.2374574393,"129":0.2403603075,"122":0.2305832555,"111":0.2697765207,"112":0.2477440758,"115":0.264196887,"108":0.2650908477,"116":0.2737595374,"114":0.2784075423,"113":0.2704259883,"109":0.2630791381,"119":0.2814481122,"118":0.2781804409,"117":0.2796109176,"110":0.2673958976,"171":0.0271924804,"172":0.0141121665,"175":0.0145605834,"168":-0.0109826059,"176":0.0103810259,"174":0.0146686177,"173":0.0139026411,"169":0.0415787581,"179":0.0528654336,"178":0.0573542931,"177":0.0584981166,"170":0.0729034936},"REAL":{"3":-220462.4398,"4":-241091.58,"7":-243324.2601,"0":-242724.2999,"8":-242343.25,"6":-238016.8697,"5":-219243.9598,"1":None,"11":None,"10":None,"9":None,"2":None,"15":-3650439.3173000002,"16":-3908575.8868999998,"19":-3174260.3075999999,"12":-3066769.4092000001,"20":-3454393.5860000001,"18":-3665726.8215000001,"17":-3991811.4641,"13":None,"23":None,"22":None,"21":None,"14":None,"147":335692.9057999995,"148":430601.7258999997,"151":134716.1732999997,"144":198995.7859000002,"152":304403.0947999995,"150":290660.3339999994,"149":432413.6551000001,"145":None,"155":None,"154":None,"153":None,"146":None,"27":-609051.2102,"28":-553580.5716,"31":-581152.8336,"24":-569713.3895,"32":-563515.7111,"30":-568895.2302,"29":-568251.2413999999,"25":None,"35":None,"34":None,"33":None,"26":None,"39":-7002.0,"40":-7002.0,"43":-5835.0,"36":-4668.0,"44":-4668.0,"42":-4668.0,"41":-4668.0,"37":None,"47":None,"46":None,"45":None,"38":None,"51":-36307.4398,"52":-33235.2498,"55":-31999.1399,"48":-35621.0799,"56":-31206.3699,"54":-33964.0596,"53":-29520.3297,"49":None,"59":None,"58":None,"57":None,"50":None,"63":-150270.9575,"64":-141840.7662,"67":-149134.2062,"60":-173391.0052,"68":-174904.6271,"66":-168516.0751,"65":-194990.5889,"61":None,"71":None,"70":None,"69":None,"62":None,"75":-93176.5988,"76":-38255.4588,"79":-106070.3587,"72":-57444.1176,"80":-106826.4465,"78":-78422.8978,"77":-100137.2473,"73":None,"83":None,"82":None,"81":None,"74":None,"87":-96242.1921,"88":-129726.9701,"91":-106594.1018,"84":-88655.0701,"92":-123991.5274,"90":-81506.4266,"89":-133166.0817,"85":None,"95":None,"94":None,"93":None,"86":None,"99":5009226.2703999998,"100":5315927.7803999996,"103":4320421.9206999997,"96":4291882.9696000004,"104":4775434.6388999997,"102":4970447.3900999995,"101":5440899.2390000001,"97":None,"107":None,"106":None,"105":None,"98":None,"135":485963.8632999995,"136":572442.4920999997,"139":283850.3794999997,"132":372386.7911000003,"140":479307.7218999995,"138":459176.4090999995,"137":627404.2440000001,"133":None,"143":None,"142":None,"141":None,"134":None,"159":242516.3069999995,"160":392346.2670999996,"163":28645.8145999997,"156":141551.6683000003,"164":197576.6482999995,"162":212237.4361999994,"161":332276.4078000001,"157":None,"167":None,"166":None,"165":None,"158":None,"123":1138324.5132999995,"124":1166260.3134999997,"127":902837.3529999997,"120":982389.2605000003,"128":1078697.8028999995,"126":1066703.6988999995,"125":1229843.8151,"121":None,"131":None,"130":None,"129":None,"122":None,"111":1358786.9530999996,"112":1407351.8934999998,"115":1146161.6130999997,"108":1225113.5604000003,"116":1321041.0528999995,"114":1304720.5685999994,"113":1449087.7749000001,"109":None,"119":None,"118":None,"117":None,"110":None,"171":146274.1148999995,"172":262619.2969999993,"175":-77948.2872000001,"168":52896.5981999999,"176":73585.1208999995,"174":130731.0095999995,"173":199110.3261000002,"169":None,"179":None,"178":None,"177":None,"170":None},"res_ptg":{"3":-0.044011276,"4":-0.0453526816,"7":-0.0563195597,"0":-0.056554268,"8":-0.0507478938,"6":-0.0478864076,"5":-0.0402955376,"1":None,"11":None,"10":None,"9":None,"2":None,"15":-0.7287431472,"16":-0.735257522,"19":-0.7347107217,"12":-0.7145510329,"20":-0.723367368,"18":-0.7375044003,"17":-0.7336675959,"13":None,"23":None,"22":None,"21":None,"14":None,"147":0.0670149216,"148":0.0810021775,"151":0.031181254,"144":0.0463656133,"152":0.063743537,"150":0.0584777005,"149":0.079474667,"145":None,"155":None,"154":None,"153":None,"146":None,"27":-0.1215858852,"28":-0.10413621,"31":-0.1345129814,"24":-0.1327420607,"32":-0.1180030204,"30":-0.114455538,"29":-0.1044406846,"25":None,"35":None,"34":None,"33":None,"26":None,"39":-0.0013978207,"40":-0.0013171737,"43":-0.0013505625,"36":-0.0010876345,"44":-0.0009775026,"42":-0.0009391509,"41":-0.0008579464,"37":None,"47":None,"46":None,"45":None,"38":None,"51":-0.0072481133,"52":-0.006252013,"55":-0.0074064849,"48":-0.0082996391,"56":-0.0065347706,"54":-0.0068331997,"53":-0.0054256343,"49":None,"59":None,"58":None,"57":None,"50":None,"63":-0.029998836,"64":-0.0266822222,"67":-0.0345184357,"60":-0.0403997514,"68":-0.0366259074,"66":-0.033903603,"65":-0.0358379342,"61":None,"71":None,"70":None,"69":None,"62":None,"75":-0.0186009962,"76":-0.0071963842,"79":-0.024550926,"72":-0.0133843625,"80":-0.0223699945,"78":-0.0157778348,"77":-0.0184045399,"73":None,"83":None,"82":None,"81":None,"74":None,"87":-0.0192129856,"88":-0.0244034486,"91":-0.024672151,"84":-0.020656451,"92":-0.0259644486,"90":-0.0163982073,"89":-0.0244750134,"85":None,"95":None,"94":None,"93":None,"86":None,"99":1.0,"100":1.0,"103":1.0,"96":1.0,"104":1.0,"102":1.0,"101":1.0,"97":None,"107":None,"106":None,"105":None,"98":None,"135":0.0970137576,"136":0.1076843997,"139":0.0656996897,"132":0.0867653647,"140":0.1003694445,"138":0.0923813035,"137":0.1153126012,"133":None,"143":None,"142":None,"141":None,"134":None,"159":0.0484139254,"160":0.0738057933,"163":0.006630328,"156":0.0329812507,"164":0.0413735426,"162":0.0426998657,"161":0.0610701271,"157":None,"167":None,"166":None,"165":None,"158":None,"123":0.2272455768,"124":0.2193897964,"127":0.2089697186,"120":0.228894699,"128":0.2258847381,"126":0.2146091921,"125":0.2260368665,"121":None,"131":None,"130":None,"129":None,"122":None,"111":0.2712568528,"112":0.264742478,"115":0.2652892783,"108":0.2854489671,"116":0.276632632,"114":0.2624955997,"113":0.2663324041,"109":None,"119":None,"118":None,"117":None,"110":None,"171":0.0292009398,"172":0.0494023448,"175":-0.0180418229,"168":0.0123247998,"176":0.0154090939,"174":0.0263016585,"173":0.0365951137,"169":None,"179":None,"178":None,"177":None,"170":None},"MES_ORDEN":{"3":1,"4":2,"7":3,"0":4,"8":5,"6":6,"5":7,"1":8,"11":9,"10":10,"9":11,"2":12,"15":1,"16":2,"19":3,"12":4,"20":5,"18":6,"17":7,"13":8,"23":9,"22":10,"21":11,"14":12,"147":1,"148":2,"151":3,"144":4,"152":5,"150":6,"149":7,"145":8,"155":9,"154":10,"153":11,"146":12,"27":1,"28":2,"31":3,"24":4,"32":5,"30":6,"29":7,"25":8,"35":9,"34":10,"33":11,"26":12,"39":1,"40":2,"43":3,"36":4,"44":5,"42":6,"41":7,"37":8,"47":9,"46":10,"45":11,"38":12,"51":1,"52":2,"55":3,"48":4,"56":5,"54":6,"53":7,"49":8,"59":9,"58":10,"57":11,"50":12,"63":1,"64":2,"67":3,"60":4,"68":5,"66":6,"65":7,"61":8,"71":9,"70":10,"69":11,"62":12,"75":1,"76":2,"79":3,"72":4,"80":5,"78":6,"77":7,"73":8,"83":9,"82":10,"81":11,"74":12,"87":1,"88":2,"91":3,"84":4,"92":5,"90":6,"89":7,"85":8,"95":9,"94":10,"93":11,"86":12,"99":1,"100":2,"103":3,"96":4,"104":5,"102":6,"101":7,"97":8,"107":9,"106":10,"105":11,"98":12,"135":1,"136":2,"139":3,"132":4,"140":5,"138":6,"137":7,"133":8,"143":9,"142":10,"141":11,"134":12,"159":1,"160":2,"163":3,"156":4,"164":5,"162":6,"161":7,"157":8,"167":9,"166":10,"165":11,"158":12,"123":1,"124":2,"127":3,"120":4,"128":5,"126":6,"125":7,"121":8,"131":9,"130":10,"129":11,"122":12,"111":1,"112":2,"115":3,"108":4,"116":5,"114":6,"113":7,"109":8,"119":9,"118":10,"117":11,"110":12,"171":1,"172":2,"175":3,"168":4,"176":5,"174":6,"173":7,"169":8,"179":9,"178":10,"177":11,"170":12},"VAR":{"3":2093.7054083209,"4":-18535.4347916791,"7":-20768.1148916791,"0":-20168.1546916791,"8":-19787.1047916791,"6":-15460.7244916791,"5":3312.1854083209,"1":None,"11":None,"10":None,"9":None,"2":None,"15":29956.9724119888,"16":-69818.1444776594,"19":512473.2595538399,"12":216260.5055189468,"20":-65137.3157136329,"18":-422989.6831069384,"17":-561121.1235067961,"13":None,"23":None,"22":None,"21":None,"14":None,"147":5391.5678464082,"148":175717.2296137547,"151":-139490.6025736046,"144":48883.9882566373,"152":71176.9074224508,"150":46049.1881579335,"149":186784.4042420568,"145":None,"155":None,"154":None,"153":None,"146":None,"27":-32066.7744451965,"28":22665.4707930944,"31":2168.0436181749,"24":12947.8231677489,"32":19145.501567749,"30":4754.3217624183,"29":18400.1460051194,"25":None,"35":None,"34":None,"33":None,"26":None,"39":6800.0,"40":6800.0,"43":7967.0,"36":9134.0,"44":9134.0,"42":9134.0,"41":9134.0,"37":None,"47":None,"46":None,"45":None,"38":None,"51":-10695.339712207,"52":-7615.2158390214,"55":-5976.029574598,"48":-9597.969574598,"56":-5183.259574598,"54":-8343.8395311899,"53":-3498.0032439256,"49":None,"59":None,"58":None,"57":None,"50":None,"63":40172.532077947,"64":29287.1389623626,"67":54712.5401416213,"60":15684.3446314738,"68":24421.7790085301,"66":2370.0191875044,"65":-18022.2119810779,"61":None,"71":None,"70":None,"69":None,"62":None,"75":-15244.5838451559,"76":39449.9961548441,"79":-29086.0337451559,"72":21179.3473548441,"80":-27706.5315451559,"78":169.8271548441,"77":-21565.7523451559,"73":None,"83":None,"82":None,"81":None,"74":None,"87":19074.4248631668,"88":-24562.2348146004,"91":17672.70278623,"84":31895.4134177034,"92":-18331.9594559884,"90":18593.246188917,"89":-31482.990866845,"85":None,"95":None,"94":None,"93":None,"86":None,"99":-30869.5278944448,"100":212933.4149666578,"103":-690067.3014209634,"96":-175376.560795255,"104":108583.3069260819,"102":476585.0943378182,"101":738579.4115604162,"97":None,"107":None,"106":None,"105":None,"98":None,"135":-34780.9642315388,"136":146430.0906513921,"139":-194203.1427152258,"132":33199.6436251635,"140":46755.1284139208,"138":43679.1689704291,"137":204806.6162231347,"133":None,"143":None,"142":None,"141":None,"134":None,"159":-9853.0159987477,"160":215167.2257685988,"163":-168576.6363187605,"156":70063.3356114814,"164":43470.3758772949,"162":46219.0153127776,"161":165218.6518969009,"157":None,"167":None,"166":None,"165":None,"158":None,"123":1181.1499258648,"124":124579.8356973191,"127":-198362.1567588027,"120":20715.7900320126,"128":23658.8864207698,"126":38134.6867392007,"125":180770.4734619409,"121":None,"131":None,"130":None,"129":None,"122":None,"111":-912.555482456,"112":143115.2704889984,"115":-177594.0418671235,"108":40883.9447236918,"116":43445.991212449,"114":53595.4112308798,"113":177458.2880536201,"109":None,"119":None,"118":None,"117":None,"110":None,"171":9221.408864419,"172":190604.9909539986,"175":-150903.9335325295,"168":101958.7490291847,"176":25138.4164213073,"174":64812.261501695,"173":133735.661030056,"169":None,"179":None,"178":None,"177":None,"170":None},"VAR_pctg":{"3":0.0094075381,"4":0.0832843091,"7":0.093316295,"0":0.0906205249,"8":0.0889083731,"6":0.0694688726,"5":0.0148824711,"1":None,"11":None,"10":None,"9":None,"2":None,"15":0.0081396051,"16":0.0181876923,"19":0.1390046908,"12":0.0658722312,"20":0.0192187638,"18":0.1304421743,"17":0.1635592455,"13":None,"23":None,"22":None,"21":None,"14":None,"147":0.0163231789,"148":0.6893994424,"151":-0.5087058922,"144":0.325650542,"152":0.3051840285,"150":0.1882546603,"149":0.7604322514,"145":None,"155":None,"154":None,"153":None,"146":None,"27":0.0555764982,"28":0.0393329743,"31":0.0037167256,"24":0.0222218725,"32":0.0328587199,"30":0.0082878506,"29":0.0313647021,"25":None,"35":None,"34":None,"33":None,"26":None,"39":0.49268222,"40":0.49268222,"43":0.5772351833,"36":0.6617881466,"44":0.6617881466,"42":0.6617881466,"41":0.6617881466,"37":None,"47":None,"46":None,"45":None,"38":None,"51":0.4175893299,"52":0.2972367582,"55":0.229643171,"48":0.3688248428,"56":0.1991790954,"54":0.3256739992,"53":0.1344231558,"49":None,"59":None,"58":None,"57":None,"50":None,"63":0.2109420079,"64":0.1711418073,"67":0.2684003602,"60":0.0829528791,"68":0.1225215439,"66":0.0138689997,"65":0.1018386013,"61":None,"71":None,"70":None,"69":None,"62":None,"75":0.1956138803,"76":0.5076863159,"79":0.3778176111,"72":0.2693769267,"80":0.350184041,"78":0.0021608508,"77":0.2744729798,"73":None,"83":None,"82":None,"81":None,"74":None,"87":0.165409161,"88":0.2335596124,"91":0.1422157981,"84":0.2645813811,"92":0.1735002311,"90":0.1857473224,"89":0.309618744,"85":None,"95":None,"94":None,"93":None,"86":None,"99":-0.0061247899,"100":0.0417271507,"103":-0.1377245356,"96":-0.0392581984,"104":0.0232669308,"102":0.1060524473,"101":0.1570670305,"97":None,"107":None,"106":None,"105":None,"98":None,"135":-0.0667908012,"136":0.3437226009,"139":-0.4062372385,"132":0.0978800166,"140":0.1080911989,"138":0.105125052,"137":0.4846374015,"133":None,"143":None,"142":None,"141":None,"134":None,"159":-0.0390420511,"160":1.2144056326,"163":-0.8547537845,"156":0.9800667183,"164":0.2820805097,"162":0.2783969096,"161":0.9889912085,"157":None,"167":None,"166":None,"165":None,"158":None,"123":0.0010386992,"124":0.1195950566,"127":-0.1801328052,"120":0.021541397,"128":0.0224246576,"126":0.037075477,"125":0.1723144286,"121":None,"131":None,"130":None,"129":None,"122":None,"111":-0.000671145,"112":0.1132029146,"115":-0.1341592319,"108":0.0345236635,"116":0.0340060732,"114":0.0428377696,"113":0.139551882,"109":None,"119":None,"118":None,"117":None,"110":None,"171":0.0672836687,"172":2.6467656417,"175":-2.06843392,"168":2.0781548975,"176":0.5188880584,"174":0.983214387,"173":2.0456802476,"169":None,"179":None,"178":None,"177":None,"170":None}})

# df = pd.DataFrame(data)


st.set_page_config(
    page_title="Models ML AI App",
    page_icon="🧊",
    layout="wide",
    initial_sidebar_state="expanded",
    # layout = "centered",
    # initial_sidebar_state = "auto",
    # menu_items={
    #     'Get Help': 'https://www.extremelycoolapp.com/help',
    #     'Report a bug': "https://www.extremelycoolapp.com/bug",
    #     'About': "# This is a header. This is an *extremely* cool app!"
    # }
)




# # Streamlit layout
# st.title('Predicciones de ingresos de la explotacion, EBITDA y resultados antes de impuestos por Modelo')

# #Intro: instructions
# col1, col2 = st.columns(2)

# with col1:
#     # Model selection
#     model = st.selectbox('Selecciona el modelo', ['Ensamble', 'XGBoost', 'ARIMA', 'LSTM', 'Regresión','Prophet', ])

# with col2:
#     # Tipo de grafica
#     tipo_grafica = st.selectbox('Tipo de grafica', [ 'Barras','Linea',])
# # Model column mapping
# model_mapping = {
#     'Prophet': ['PRED_PROPHET_INGRESOS', 'PRED_PROPHET_EBITDA', 'PRED_PROPHET_RESULTADOS'],
#     'XGBoost': ['PRED_XGBOOST_INGRESOS', 'PRED_XGBOOST_EBITDA', 'PRED_XGBOOST_RESULTADOS'],
#     'ARIMA': ['PRED_ARIMA_INGRESOS', 'PRED_ARIMA_EBITDA', 'PRED_ARIMA_RESULTADOS'],
#     'LSTM': ['PRED_LSTM_INGRESOS', 'PRED_LSTM_EBITDA', 'PRED_LSTM_RESULTADOS'],
#     'Regresión': ['PRED_REGRESION_INGRESOS', 'PRED_REGRESION_EBITDA', 'PRED_REGRESION_RESULTADOS'],
#     'OLS': ['PRED_OLS_INGRESOS', 'PRED_OLS_EBITDA', 'PRED_OLS_RESULTADOS'],
#     'Ensamble': [1,2,3]
# }

# # Get selected model data
# if model == 'Ensamble':
#     ingresos = df[['PRED_PROPHET_INGRESOS', 'PRED_XGBOOST_INGRESOS', 'PRED_ARIMA_INGRESOS', 'PRED_LSTM_INGRESOS', 'PRED_REGRESION_INGRESOS', 'PRED_OLS_INGRESOS']].mean(axis=1)

#     ingresos.name = 'INGRESOS'
#     ebitda = df[['PRED_PROPHET_EBITDA', 'PRED_XGBOOST_EBITDA', 'PRED_ARIMA_EBITDA', 'PRED_LSTM_EBITDA', 'PRED_REGRESION_EBITDA', 'PRED_OLS_EBITDA']].mean(axis=1)
#     ebitda.name = 'EBITDA'
#     resultados = df[['PRED_PROPHET_RESULTADOS', 'PRED_XGBOOST_RESULTADOS', 'PRED_ARIMA_RESULTADOS', 'PRED_LSTM_RESULTADOS', 'PRED_REGRESION_RESULTADOS', 'PRED_OLS_RESULTADOS']].mean(axis=1)
#     resultados.name = 'RESULTADOS'
# else:
#     ingresos, ebitda, resultados = df[model_mapping[model]]


# # Función para formatear ejes decimales
# # Crear los nombres de los meses
# meses = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO', 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE']
# meses = ['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN', 'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC']

# import matplotlib.ticker as ticker
# def format_axes(ax):
#     ax.set_xticks(np.arange(1, 13))  # Establecer las posiciones de los ticks en 1 a 12
#     ax.set_xticklabels(meses)  # Establecer los nombres de los meses
#     ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.0f'))  # Formato decimal en el eje Y



# # Plotting
# def plot_metric(metric, title):
#     # El grafico debe verse los ejes en formato decimal

#     fig, ax = plt.subplots(figsize=(6, 4))
#     # definir el tamano del grafico
#     # fig.set_size_inches(10, 5)
#     if model == 'Ensamble':

#         if tipo_grafica == 'Barras':
#             ax.bar(df['MES_ORDEN'], metric, label='Predicción')
#         elif tipo_grafica == 'Linea':
#             ax.plot(df['MES_ORDEN'], metric, marker='o', label='Predicción')
        
#         if metric.name == 'INGRESOS':
#             origen_name = 'INGRESOS DE LA EXPLOTACION'
#         elif metric.name == 'EBITDA':
#             origen_name = 'EBITDA'
#         elif metric.name == 'RESULTADOS':
#             origen_name = 'RESULTADOS ANTES DE IMPUESTOS'

#     else:
#         if tipo_grafica == 'Barras':
#             ax.bar(df['MES_ORDEN'], df[metric], label='Predicción')
            
#         elif tipo_grafica == 'Linea':
#             ax.plot(df['MES_ORDEN'], df[metric], marker='o', label='Predicción')

#         if metric.split('_')[2] == 'INGRESOS':
#             origen_name = 'INGRESOS DE LA EXPLOTACION'
#         elif metric.split('_')[2] == 'EBITDA':
#             origen_name = 'EBITDA'
#         elif metric.split('_')[2] == 'RESULTADOS':
#             origen_name = 'RESULTADOS ANTES DE IMPUESTOS'

#     # ax.plot(df_org['MES_ORDEN'], df_org[origen_name], marker='o')
#     if tipo_grafica == 'Barras':
#         ax.bar(df_org[(df_org['PARTIDA GENERAL'] ==origen_name)]['MES_ORDEN'], df_org[(df_org['PARTIDA GENERAL'] ==origen_name)]['REAL'], label='Real')

#     elif tipo_grafica == 'Linea':
#         ax.plot(df_org[(df_org['PARTIDA GENERAL'] ==origen_name)]['MES_ORDEN'], df_org[(df_org['PARTIDA GENERAL'] ==origen_name)]['REAL'], marker='o', label='Real')


#     maximo = np.int64(df_org[(df_org['PARTIDA GENERAL'] == origen_name)]['REAL'].max()*1.5)
#     minimo = np.int64(df_org[(df_org['PARTIDA GENERAL'] == origen_name)]['REAL'].min())
#     if minimo < 0:
#         minimo = minimo*1.5
#     else:
#         minimo = 0
#     # el eje desde cero
#     ax.set_ylim(minimo, maximo)
#     format_axes(ax) 
#     ax.set_title(title,fontsize=18)
#     ax.set_xlabel('Mes', fontsize=18, labelpad=20)
#     ax.set_ylabel('Monto', fontsize=18, labelpad=20)
#     # Aumentar el tamaño del texto de los ejes
#     ax.tick_params(axis='x', labelsize=12)
#     ax.tick_params(axis='y', labelsize=12)
#     # legend
#     ax.legend()

#     st.pyplot(fig)



# #Intro: instructions
# col1, col2, col3 = st.columns(3)

# with col1:
#     # plot_metric(ingresos, f'INGRESOS DE LA EXPLOTACION - {model}')
#     plot_metric(ingresos, f'INGRESOS DE LA EXPLOTACION')

# with col2:
#     # plot_metric(ebitda, f'EBITDA - {model}')
#     plot_metric(ebitda, f'EBITDA')

# with col3:
#     # plot_metric(resultados, f'RESULTADOS ANTES DE IMPUESTOS - {model}')
#     plot_metric(resultados, f'RESULTADOS ANTES DE IMPUESTOS')



import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Data
df = pd.DataFrame(data)
df.loc[7:,'PRED_EBITDA_ICI'] =df.loc[7:,'PRED_EBITDA_ICI'].values + np.array([5000,200000,200000,250000,270000])
df.loc[7:,'PRED_EBITDA_ICS'] =df.loc[7:,'PRED_EBITDA_ICS'].values - np.array([50000,150000,200000,200000,250000])
# st.set_page_config(
#     page_title="Models ML AI App",
#     page_icon="🧊",
#     layout="wide",
#     initial_sidebar_state="expanded",
# )

# Streamlit layout
st.title('Predicciones de ingresos de la explotación, EBITDA y resultados antes de impuestos por Modelo')

#Intro: instructions
col1, col2 = st.columns(2)

with col1:
    # Model selection
    model = st.selectbox('Selecciona el modelo', ['OLS','Ensamble', 'XGBoost', 'ARIMA', 'LSTM', 'Regresión','Prophet',])

with col2:
    # Tipo de gráfica
    tipo_grafica = st.selectbox('Tipo de gráfica', ['Línea','Barras' ])

# Model column mapping
model_mapping = {
    'Prophet': ['PRED_PROPHET_INGRESOS', 'PRED_PROPHET_EBITDA', 'PRED_PROPHET_RESULTADOS'],
    'XGBoost': ['PRED_XGBOOST_INGRESOS', 'PRED_XGBOOST_EBITDA', 'PRED_XGBOOST_RESULTADOS'],
    'ARIMA': ['PRED_ARIMA_INGRESOS', 'PRED_ARIMA_EBITDA', 'PRED_ARIMA_RESULTADOS'],
    'LSTM': ['PRED_LSTM_INGRESOS', 'PRED_LSTM_EBITDA', 'PRED_LSTM_RESULTADOS'],
    'Regresión': ['PRED_REGRESION_INGRESOS', 'PRED_REGRESION_EBITDA', 'PRED_REGRESION_RESULTADOS'],
    'OLS': ['PRED_OLS_INGRESOS', 'PRED_OLS_EBITDA', 'PRED_OLS_RESULTADOS'],
    'Ensamble': [1, 2, 3]
}

# Get selected model data
if model == 'Ensamble':
    ingresos = df[['PRED_PROPHET_INGRESOS', 'PRED_XGBOOST_INGRESOS', 'PRED_ARIMA_INGRESOS', 'PRED_LSTM_INGRESOS', 'PRED_REGRESION_INGRESOS','PRED_OLS_INGRESOS']].mean(axis=1)
    ebitda = df[['PRED_PROPHET_EBITDA', 'PRED_XGBOOST_EBITDA', 'PRED_ARIMA_EBITDA', 'PRED_LSTM_EBITDA', 'PRED_REGRESION_EBITDA','PRED_OLS_EBITDA']].mean(axis=1)
    resultados = df[['PRED_PROPHET_RESULTADOS', 'PRED_XGBOOST_RESULTADOS', 'PRED_ARIMA_RESULTADOS', 'PRED_LSTM_RESULTADOS', 'PRED_REGRESION_RESULTADOS','PRED_OLS_RESULTADOS']].mean(axis=1)
else:
    ingresos, ebitda, resultados = df[model_mapping[model]]

# mostrar Dataframe
# st.write(ingresos)


# Nombres de los meses
meses = ['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN', 'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC']

# Plotting with Plotly
def plot_metric_plotly(metric, title, origen_name):
    fig = go.Figure()

    if model == 'Ensamble':
        # Graficar predicciones
        if tipo_grafica == 'Línea':
            # fig.add_trace([go.Scatter(
            #     x=meses, y=metric,
            #     mode='lines+markers',
            #     name='Predicción',
            #     line=dict(color='#FF7F0E')
            # Graficar valores reales
            real_data = df_org[df_org['PARTIDA GENERAL'] == origen_name]['REAL']
            # st.write(origen_name)
            # st.write(origen_name.split(' ')[0])
            # st.write('PPTO_'+origen_name.split(' ')[0])
            # st.write(real_data)

            fig = go.Figure([
                    go.Scatter(
                        x=meses, y=df['PPTO_'+origen_name.split(' ')[0]],
                        mode='lines+markers',
                        name='PPTO',
                        # color #3283FE y trasparencia 0.5
                        marker=dict(color='rgb(179,226,205)', opacity=0.8)
                        
                    ),
                        go.Scatter(
                        x=meses[0:8], y=pd.concat([real_data[0:7],pd.Series(metric[7])]),
                        mode='lines+markers',
                        name='Real',
                        line=dict(color='#3283FE')
                    ),
                        go.Scatter(
                            x=meses[7:], y=metric[7:],
                            mode='lines+markers',
                            name='Predicción',
                            line=dict(color='#FF7F0E')
                        ),
                        go.Scatter(
                            x = meses[7:],
                            y = metric[7:] + metric[7:]*0.07,
                            name = 'Intervalo confianza superior',
                            mode='lines',
                            # marker = dict(color="#444"),
                            marker = dict(color='rgb(255,217,47)'),
                            line = dict(width=0),
                            showlegend = False
                         ),

                        go.Scatter(
                            x = meses[7:],
                            y = metric[7:] - metric[7:]*0.07,
                            name = 'Intervalo confianza inferior',
                            # marker = dict(color="#444"),
                            marker = dict(color='rgb(255,217,47)'),
                            line = dict(width=0),
                            mode = 'lines',
                            # fillcolor = 'rgba(68, 68, 68, 0.3)',
                            fillcolor = 'rgba(255,217,47, 0.3)',
                            fill = 'tonexty',
                            showlegend = False
                        )]
            
            )
            



        elif tipo_grafica == 'Barras':
            # Graficar valores reales
            real_data = df_org[df_org['PARTIDA GENERAL'] == origen_name]['REAL']
            fig.add_trace(go.Bar(
                x=meses[0:7], y=real_data[0:7],
                name='Real',
                line=dict(color='#3283FE')
            ))
            fig.add_trace(go.Bar(
                x=meses[7:], y=metric[7:],
                name='Predicción',
                line=dict(color='#FF7F0E')
            ))

            
    else:
        # Graficar predicciones
        if tipo_grafica == 'Línea':
            # fig.add_trace(go.Scatter(
            #     x=meses, y=df[metric],
            #     mode='lines+markers',
            #     name='Predicción',
            #     line=dict(color='#FF7F0E')
            # ))
            # fig.add_trace(go.Scatter(
            #     x=meses[:7], y=df[metric].iloc[:7],
            #     mode='lines+markers',
            #     name='Real',
            #     line=dict(color='#3283FE')
                
            # ))
            fig = go.Figure([
                go.Scatter(
                    x=meses, y=df['PPTO_'+metric.split('_')[2]],
                    mode='lines+markers',
                    name='PPTO',
                    # color #3283FE y trasparencia 0.5
                    marker=dict(color='rgb(179,226,205)', opacity=0.8)
                    
                ),
                go.Scatter(
                    x=meses[:8], y=df[metric].iloc[:8],
                    mode='lines+markers',
                    name='Real',
                    line=dict(color='#3283FE')
                ),

                go.Scatter(
                    x = meses[7:],
                    y = df[metric].iloc[7:],
                    name = 'Predicción',
                    mode = 'lines+markers',
                    showlegend = True,
                    line=dict(color='#FF7F0E')
                    
                ),
                go.Scatter(
                    x = meses[7:],
                    y = df[metric].iloc[7:]+df[metric].iloc[7:]*0.05,
                    name = 'Intervalo confianza superior',
                    mode='lines',
                    # marker = dict(color="#444"),
                    marker = dict(color='rgb(255,217,47)'),
                    
                    line = dict(width=0),
                    showlegend = False
                ),

                go.Scatter(
                    x = meses[7:],
                    y = df[metric].iloc[7:]-df[metric].iloc[7:]*0.05,
                    name = 'Intervalo confianza inferior',
                    # marker = dict(color="#444"),
                    marker = dict(color='rgb(255,217,47)'),
                    line = dict(width=0),
                    mode = 'lines',
                    # fillcolor = 'rgba(68, 68, 68, 0.3)',
                    fillcolor = 'rgba(255,217,47, 0.3)',
                    fill = 'tonexty',
                    showlegend = False
                )
            ])






            # st.write(metric)
            # st.write('PPTO_INGRESOS')

            # st.write(metric.split('_')[1])
            # st.write('PPTO_'+metric.split('_')[2])
            
            if metric.split('_')[1] == 'OLS':
                fig = go.Figure([
                    go.Scatter(
                        x=meses, y=df['PPTO_'+metric.split('_')[2]],
                        mode='lines+markers',
                        name='PPTO',
                        # color #3283FE y trasparencia 0.5
                        marker=dict(color='rgb(179,226,205)', opacity=0.8)
                        
                    ),
                    go.Scatter(
                        x=meses[:8], y=df[metric].iloc[:8],
                        mode='lines+markers',
                        name='Real',
                        marker=dict(color='#3283FE') 
                    ),

                    go.Scatter(
                        x = meses[7:],
                        y = df[metric].iloc[7:],
                        name = 'Predicción',
                        mode = 'lines+markers',
                        showlegend = True,
                        line=dict(color='#FF7F0E')
                        
                    ),
                    go.Scatter(
                        x = meses[7:],
                        y = df[metric.replace('_OLS','')+ '_ICS'].iloc[7:],
                        name = 'Intervalo confianza superior',
                        mode='lines',
                        # marker = dict(color="#444"),
                        marker = dict(color="rgb(255,217,47)"),
                        line = dict(width=0),
                        showlegend = False
                    ),

                    go.Scatter(
                        x = meses[7:],
                        y = df[metric.replace('_OLS','')+ '_ICI'].iloc[7:],
                        name = 'Intervalo confianza inferior',
                        # marker = dict(color="#444"),
                        marker = dict(color='rgb(255,217,47)'),
                        line = dict(width=0),
                        mode = 'lines',
                        # fillcolor = 'rgba(68, 68, 68, 0.3)',
                        fillcolor = 'rgba(255,217,47, 0.3)',
                        fill = 'tonexty',
                        showlegend = False
                    )
                ])
                

        elif tipo_grafica == 'Barras':
            
            fig.add_trace(go.Bar(
                x=meses[:7], y=df[metric].iloc[:7],
                name='Real',
                # color='#3283FE'
                marker=dict(color='#3283FE') 


            ))

            fig.add_trace(go.Bar(
                x=meses[7:], y=df[metric].iloc[7:],
                name='Predicción',
                # color='#FF7F0E'
                marker=dict(color='#FF7F0E') 
            ))




    fig.update_layout(
        title=title,
        xaxis_title='Mes',
        yaxis_title='USD',
        hovermode="x",
        template='plotly',
        # titulo centrado
        title_x=0.5,
        # transparencia del fondo
        # plot_bgcolor='rgba(100, 100, 100 100)',
        # leyenda dentro de la grafica
        legend=dict(
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01
        ),
    #     xaxis=dict(
    #     gridcolor='rgb(110, 110, 110)'  # Color de las líneas de la grilla en el eje X
    # ),
    # yaxis=dict(
    #     gridcolor='rgb(110, 110, 110)'  # Color de las líneas de la grilla en el eje Y
    # ),
    # font=dict(color='white')  # Color del texto
    paper_bgcolor='rgba(240,240,240,0.4)',  # Fondo general del gráfico
    )
    
    return fig




# Graficar las tres métricas
col1, col2, col3 = st.columns(3)

with col1:
    st.plotly_chart(plot_metric_plotly(ingresos, f'Ingresos de la Explotación', 'INGRESOS DE LA EXPLOTACION'),theme=None)

with col2:
    st.plotly_chart(plot_metric_plotly(ebitda, f'EBITDA', 'EBITDA'),theme=None)

with col3:
    st.plotly_chart(plot_metric_plotly(resultados, f'Resultados Antes de Impuestos', 'RESULTADOS ANTES DE IMPUESTOS'),theme=None)






import plotly.graph_objects as go

# Crear figura
fig = go.Figure()

# Agregar trazos (traces)
fig.add_trace(go.Scatter(
    x=['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN', 'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC'],
    y=[4.5, 5.0, 4.7, 4.3, 4.9, 5.2, 5.6, 6.0, 6.5, 6.8, 7.0, 7.2],
    mode='lines+markers',
    name='Predicción',
    line=dict(color='orange')
))

fig.add_trace(go.Scatter(
    x=['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN', 'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC'],
    y=[4.5, 4.6, 4.8, 4.4, 4.3, 5.1, 5.3, 5.7, 6.3, 6.6, 6.9, 7.1],
    mode='lines+markers',
    name='Real',
    line=dict(color='blue')
))

# # Configuración de colores en el layout
# fig.update_layout(
#     title='Ingresos de la Explotación',
#     xaxis_title='Mes',
#     yaxis_title='USD',
#     plot_bgcolor='rgba(100,100,100,0.2)',  # Fondo del gráfico transparente o puedes elegir otro color
#     paper_bgcolor='rgb(50,50,50)',  # Fondo general del gráfico
#     xaxis=dict(
#         gridcolor='rgb(120, 120, 120)'  # Color de las líneas de la grilla en el eje X
#     ),
#     yaxis=dict(
#         gridcolor='rgb(120, 120, 120)'  # Color de las líneas de la grilla en el eje Y
#     ),
#     font=dict(color='white')  # Color del texto
# )
# st.plotly_chart(fig,theme=None)